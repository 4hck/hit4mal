from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras import backend as K
import os
from shutil import copyfile
import shutil
import sys
import keras
img_width, img_height = 150, 150
train_data_dir = 'train/'
validation_data_dir = 'validation/'
nb_train_samples = 4000
nb_validation_samples = 2000
epochs = 2
batch_size = 16

def create_dataset(main_path, ratio):
    #main_path = 'malicious'
    train_path = os.getcwd() + '/train/' + main_path
    val_path = os.getcwd() + '/validation/' + main_path

    # check path exists
    if (not os.path.exists(main_path)):
        print("dataset not found")
        sys.exit(0)
    else:
        # delete existing files

        if(os.path.exists(train_path)):
            shutil.rmtree(train_path)
        os.makedirs(train_path)


        if(os.path.exists(val_path)):
            shutil.rmtree(val_path)
        os.makedirs(val_path)


        main_files = [os.path.join(main_path, f) for f in os.listdir(main_path)]
        # copy train files
        for t in main_files[0:ratio]:
            t_base = os.path.basename(t)
            copyfile(t, train_path + t_base)
        # copy test files
        for v in main_files[ratio:]:
            v_base = os.path.basename(v)
            copyfile(v, val_path +  v_base)
        print("OK")


def main():
    malicious_path = 'malicious/'
    benign_path = 'benign/'
    create_dataset(malicious_path, 2000)
    create_dataset(benign_path, 2000)

    if K.image_data_format() == 'channels_first':
        input_shape = (3, img_width, img_height)
    else:
        input_shape = (img_width, img_height, 3)

    model = Sequential()
    model.add(Conv2D(32, (3, 3), input_shape=input_shape))
    model.add(Activation('relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))

    model.add(Conv2D(32, (3, 3)))
    model.add(Activation('relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))

    model.add(Conv2D(64, (3, 3)))
    model.add(Activation('relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))

    model.add(Flatten())
    model.add(Dense(64))
    model.add(Activation('relu'))
    model.add(Dropout(0.5))
    model.add(Dense(1))
    model.add(Activation('sigmoid'))

    model.compile(loss='binary_crossentropy',
                  optimizer='rmsprop',
                  metrics=['accuracy'])

    # this is the augmentation configuration we will use for training
    train_datagen = ImageDataGenerator(
        rescale=1. / 255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

    # this is the augmentation configuration we will use for testing:
    # only rescaling
    test_datagen = ImageDataGenerator(rescale=1. / 255)

    train_generator = train_datagen.flow_from_directory(
        train_data_dir,
        target_size=(img_width, img_height),
        batch_size=batch_size,
        class_mode='binary')

    validation_generator = test_datagen.flow_from_directory(
        validation_data_dir,
        target_size=(img_width, img_height),
        batch_size=batch_size,
        class_mode='binary')

    filepath = "checkpoints/weights.best.bigru_3conv_7.hdf5"
    check_cb = keras.callbacks.ModelCheckpoint(filepath, monitor='val_loss',
                                               verbose=0, save_best_only=True, mode='min')
    model.fit_generator(
        train_generator,
        steps_per_epoch=nb_train_samples // batch_size,
        epochs=epochs,
        validation_data=validation_generator,
        validation_steps=nb_validation_samples // batch_size, callbacks = [check_cb])

    model.save_weights('first_try.h5')
if __name__ == "__main__":
    main()


